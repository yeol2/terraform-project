name: Terraform CI/CD

on:
  push:
    branches:
      - main
    paths:
      - terraform-stage/**
      - modules/**
      - backend/**

  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/workflows-terraform.yml'
  
  # 수동 destroy 추가
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Confirm if you want to destroy infrastructure'
        required: true
        default: 'DESTROY'
      
jobs:
  # backend -> S3 & DynamoDB 생성 
  backend_setup:
    name: create S3 & DynamoDB
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: ap-northeast-2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
    
      - name: Init and Apply Backend
        run: |
          cd terraform-stage
          terraform init
          
  terraform:
    name: Apply Terraform Workflow
    runs-on: ubuntu-latest
    needs: backend_setup

    env:
      AWS_REGION: ap-northeast-2

    defaults:
      run:
        working-directory: terraform-stage

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # aws 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Terraform 리소스(S3, DynamaDB) 존재 여부 확인 후 init & apply 실행
      - name: Check and Initialize Terraform Backend
        run: |
          #!/bin/bash

          # S3 버킷 존재 여부 확인
          check_bucket_exists() {
            BUCKET_NAME="$1"
            output=$(aws s3 ls "s3://$BUCKET_NAME" 2>&1)
            if echo "$output" | grep -q 'NoSuchBucket'; then
              echo "false"
            elif echo "$output" | grep -q 'Access Denied'; then
              echo "access denied"
            else
              echo "true"
            fi
          }
          # DynamoDB 존재 여부 확인
          check_dynamodb_exists() {
              TABLE_NAME="$1"
              output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
              if echo "$output" | grep -q 'ResourceNotFoundException'; then
                  echo "false"
              elif echo "$output" | grep -q 'AccessDeniedException'; then
                  echo "access denied"
              else
                  echo "true"
              fi
          }

          # Terraform 상태 관리를 위한 S3 버킷과 DynamoDB 테이블 이름
          S3_BUCKET="rowan-2503-state-finale"
          DYNAMODB_TABLE="rowan-2503-state-final"

          # 버킷과 테이블의 존재 여부를 확인
          BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
          DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")

          # Terraform 명령을 실행할 디렉터리(backend)로 이동
          if [ -d backend ]; then
              cd backend
          else
              echo "Backend directory does not exist. Exiting..."
              exit 1
          fi

          # 조건 분기 - 백엔드 리소스 존재 여부
          # 둘 다 존재 -> init & apply 하지 않고 넘김
          if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
              echo "Both S3 bucket and DynamoDB table exist. Skipping Terraform init."

          # 둘 중 하나라도 권한 문제 -> 실패 종료
          elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
              echo "Access denied when checking resources. Please check your AWS credentials and permissions."
              exit 1

          # 둘 중 하나라도 없으면 init -> plan -> apply
          else
              echo "Initializing Terraform because one or more resources do not exist."
              terraform init
              terraform plan
              terraform apply -auto-approve
          fi

      # Generates an execution plan for Terraform, 사용자 입력 받지 않도록 설정
      - name: Terraform Plan
        run: cd terraform-stage; terraform init ; terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        run: cd terraform-stage; terraform apply -auto-approve -input=false
  
  # 수동 실행으로 인프라 삭제
  backend_destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: backend_setup
    steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: latest
        
        # 조건 분기 -> 파괴 여부 확인 
        - name: Confirm Destruction
          # Github Action의 수동 입력 값(confirm_destroy)이 'DESTROY' 일 경우에 실행
          if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
          run: |
            echo "Destruction confirmed. Proceeding with Terraform destroy operation."

        - name: Terraform Init for Destroy
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: |
            cd terraform-stage; terraform init \
              -backend-config="region=ap-northeast-2" \
              -backend-config="bucket=rowan-2503-state-final" \
              -backend-config="key=stage/terraform/terraform.tfstate"
        # 실제 인프라 삭제 부분
        - name: Terraform Destroy
          if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: |
            cd terraform-stage; terraform destroy -auto-approve